package com.nutritionalStylist.healthyKitch.controller;

import com.nutritionalStylist.healthyKitch.model.Recipe;
import com.nutritionalStylist.healthyKitch.repository.RecipeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.Optional;

@Controller
public class RecipeListController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RecipeRepository recipeRepository;

    @RequestMapping("/RecipeList")
    public String viewRecipeList() {
        return "RecipeList";
    }


// /recipes/
  //          /recipes/:id
// /recipes/:id/instructions
///recipes/:id/instructions/:id


    /**
     * Update Owner
     */
    @RequestMapping(value = "/owners/{recipeID}", method = RequestMethod.PUT)
    public Recipe updateOwner(@PathVariable("recipeID") int recipeID, @Valid @RequestBody Recipe recipeRequest) {
        Optional<Recipe> recipeModel = retrieveRecipe(recipeID);
        // This is done by hand for simplicity purpose. In a real life use-case we should consider using MapStruct.
        recipeModel.get().setName(recipeRequest.getName());

        //this.recipeRepository.save(recipeModel);
        this.recipeRepository.save(recipeModel.get());
        return recipeModel.get();
    }

    private Optional<Recipe> retrieveRecipe(Integer recipeID){
        return recipeRepository.findById(1);
    }

}
